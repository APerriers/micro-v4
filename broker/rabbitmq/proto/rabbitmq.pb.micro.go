// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/rabbitmq.proto

package rabbitmq

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Rabbitmq service

func NewRabbitmqEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Rabbitmq service

type RabbitmqService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Rabbitmq_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Rabbitmq_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (Rabbitmq_BidiStreamService, error)
}

type rabbitmqService struct {
	c    client.Client
	name string
}

func NewRabbitmqService(name string, c client.Client) RabbitmqService {
	return &rabbitmqService{
		c:    c,
		name: name,
	}
}

func (c *rabbitmqService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Rabbitmq.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rabbitmqService) ClientStream(ctx context.Context, opts ...client.CallOption) (Rabbitmq_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Rabbitmq.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &rabbitmqServiceClientStream{stream}, nil
}

type Rabbitmq_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ClientStreamRequest) error
}

type rabbitmqServiceClientStream struct {
	stream client.Stream
}

func (x *rabbitmqServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *rabbitmqServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *rabbitmqServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *rabbitmqServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *rabbitmqServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *rabbitmqService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Rabbitmq_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Rabbitmq.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &rabbitmqServiceServerStream{stream}, nil
}

type Rabbitmq_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type rabbitmqServiceServerStream struct {
	stream client.Stream
}

func (x *rabbitmqServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *rabbitmqServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *rabbitmqServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *rabbitmqServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *rabbitmqServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rabbitmqService) BidiStream(ctx context.Context, opts ...client.CallOption) (Rabbitmq_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "Rabbitmq.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &rabbitmqServiceBidiStream{stream}, nil
}

type Rabbitmq_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type rabbitmqServiceBidiStream struct {
	stream client.Stream
}

func (x *rabbitmqServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *rabbitmqServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *rabbitmqServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *rabbitmqServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *rabbitmqServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *rabbitmqServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Rabbitmq service

type RabbitmqHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, Rabbitmq_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, Rabbitmq_ServerStreamStream) error
	BidiStream(context.Context, Rabbitmq_BidiStreamStream) error
}

func RegisterRabbitmqHandler(s server.Server, hdlr RabbitmqHandler, opts ...server.HandlerOption) error {
	type rabbitmq interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type Rabbitmq struct {
		rabbitmq
	}
	h := &rabbitmqHandler{hdlr}
	return s.Handle(s.NewHandler(&Rabbitmq{h}, opts...))
}

type rabbitmqHandler struct {
	RabbitmqHandler
}

func (h *rabbitmqHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.RabbitmqHandler.Call(ctx, in, out)
}

func (h *rabbitmqHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.RabbitmqHandler.ClientStream(ctx, &rabbitmqClientStreamStream{stream})
}

type Rabbitmq_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type rabbitmqClientStreamStream struct {
	stream server.Stream
}

func (x *rabbitmqClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *rabbitmqClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *rabbitmqClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *rabbitmqClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *rabbitmqClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *rabbitmqHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.RabbitmqHandler.ServerStream(ctx, m, &rabbitmqServerStreamStream{stream})
}

type Rabbitmq_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type rabbitmqServerStreamStream struct {
	stream server.Stream
}

func (x *rabbitmqServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *rabbitmqServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *rabbitmqServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *rabbitmqServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *rabbitmqServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *rabbitmqHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.RabbitmqHandler.BidiStream(ctx, &rabbitmqBidiStreamStream{stream})
}

type Rabbitmq_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type rabbitmqBidiStreamStream struct {
	stream server.Stream
}

func (x *rabbitmqBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *rabbitmqBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *rabbitmqBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *rabbitmqBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *rabbitmqBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *rabbitmqBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
