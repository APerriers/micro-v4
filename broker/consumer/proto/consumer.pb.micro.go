// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/consumer.proto

package consumer

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Consumer service

func NewConsumerEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Consumer service

type ConsumerService interface {
	Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error)
	ClientStream(ctx context.Context, opts ...client.CallOption) (Consumer_ClientStreamService, error)
	ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Consumer_ServerStreamService, error)
	BidiStream(ctx context.Context, opts ...client.CallOption) (Consumer_BidiStreamService, error)
}

type consumerService struct {
	c    client.Client
	name string
}

func NewConsumerService(name string, c client.Client) ConsumerService {
	return &consumerService{
		c:    c,
		name: name,
	}
}

func (c *consumerService) Call(ctx context.Context, in *CallRequest, opts ...client.CallOption) (*CallResponse, error) {
	req := c.c.NewRequest(c.name, "Consumer.Call", in)
	out := new(CallResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerService) ClientStream(ctx context.Context, opts ...client.CallOption) (Consumer_ClientStreamService, error) {
	req := c.c.NewRequest(c.name, "Consumer.ClientStream", &ClientStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &consumerServiceClientStream{stream}, nil
}

type Consumer_ClientStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ClientStreamRequest) error
}

type consumerServiceClientStream struct {
	stream client.Stream
}

func (x *consumerServiceClientStream) Close() error {
	return x.stream.Close()
}

func (x *consumerServiceClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *consumerServiceClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *consumerServiceClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *consumerServiceClientStream) Send(m *ClientStreamRequest) error {
	return x.stream.Send(m)
}

func (c *consumerService) ServerStream(ctx context.Context, in *ServerStreamRequest, opts ...client.CallOption) (Consumer_ServerStreamService, error) {
	req := c.c.NewRequest(c.name, "Consumer.ServerStream", &ServerStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &consumerServiceServerStream{stream}, nil
}

type Consumer_ServerStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ServerStreamResponse, error)
}

type consumerServiceServerStream struct {
	stream client.Stream
}

func (x *consumerServiceServerStream) Close() error {
	return x.stream.Close()
}

func (x *consumerServiceServerStream) Context() context.Context {
	return x.stream.Context()
}

func (x *consumerServiceServerStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *consumerServiceServerStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *consumerServiceServerStream) Recv() (*ServerStreamResponse, error) {
	m := new(ServerStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *consumerService) BidiStream(ctx context.Context, opts ...client.CallOption) (Consumer_BidiStreamService, error) {
	req := c.c.NewRequest(c.name, "Consumer.BidiStream", &BidiStreamRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &consumerServiceBidiStream{stream}, nil
}

type Consumer_BidiStreamService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamRequest) error
	Recv() (*BidiStreamResponse, error)
}

type consumerServiceBidiStream struct {
	stream client.Stream
}

func (x *consumerServiceBidiStream) Close() error {
	return x.stream.Close()
}

func (x *consumerServiceBidiStream) Context() context.Context {
	return x.stream.Context()
}

func (x *consumerServiceBidiStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *consumerServiceBidiStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *consumerServiceBidiStream) Send(m *BidiStreamRequest) error {
	return x.stream.Send(m)
}

func (x *consumerServiceBidiStream) Recv() (*BidiStreamResponse, error) {
	m := new(BidiStreamResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Consumer service

type ConsumerHandler interface {
	Call(context.Context, *CallRequest, *CallResponse) error
	ClientStream(context.Context, Consumer_ClientStreamStream) error
	ServerStream(context.Context, *ServerStreamRequest, Consumer_ServerStreamStream) error
	BidiStream(context.Context, Consumer_BidiStreamStream) error
}

func RegisterConsumerHandler(s server.Server, hdlr ConsumerHandler, opts ...server.HandlerOption) error {
	type consumer interface {
		Call(ctx context.Context, in *CallRequest, out *CallResponse) error
		ClientStream(ctx context.Context, stream server.Stream) error
		ServerStream(ctx context.Context, stream server.Stream) error
		BidiStream(ctx context.Context, stream server.Stream) error
	}
	type Consumer struct {
		consumer
	}
	h := &consumerHandler{hdlr}
	return s.Handle(s.NewHandler(&Consumer{h}, opts...))
}

type consumerHandler struct {
	ConsumerHandler
}

func (h *consumerHandler) Call(ctx context.Context, in *CallRequest, out *CallResponse) error {
	return h.ConsumerHandler.Call(ctx, in, out)
}

func (h *consumerHandler) ClientStream(ctx context.Context, stream server.Stream) error {
	return h.ConsumerHandler.ClientStream(ctx, &consumerClientStreamStream{stream})
}

type Consumer_ClientStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*ClientStreamRequest, error)
}

type consumerClientStreamStream struct {
	stream server.Stream
}

func (x *consumerClientStreamStream) Close() error {
	return x.stream.Close()
}

func (x *consumerClientStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *consumerClientStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *consumerClientStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *consumerClientStreamStream) Recv() (*ClientStreamRequest, error) {
	m := new(ClientStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (h *consumerHandler) ServerStream(ctx context.Context, stream server.Stream) error {
	m := new(ServerStreamRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ConsumerHandler.ServerStream(ctx, m, &consumerServerStreamStream{stream})
}

type Consumer_ServerStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*ServerStreamResponse) error
}

type consumerServerStreamStream struct {
	stream server.Stream
}

func (x *consumerServerStreamStream) Close() error {
	return x.stream.Close()
}

func (x *consumerServerStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *consumerServerStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *consumerServerStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *consumerServerStreamStream) Send(m *ServerStreamResponse) error {
	return x.stream.Send(m)
}

func (h *consumerHandler) BidiStream(ctx context.Context, stream server.Stream) error {
	return h.ConsumerHandler.BidiStream(ctx, &consumerBidiStreamStream{stream})
}

type Consumer_BidiStreamStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*BidiStreamResponse) error
	Recv() (*BidiStreamRequest, error)
}

type consumerBidiStreamStream struct {
	stream server.Stream
}

func (x *consumerBidiStreamStream) Close() error {
	return x.stream.Close()
}

func (x *consumerBidiStreamStream) Context() context.Context {
	return x.stream.Context()
}

func (x *consumerBidiStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *consumerBidiStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *consumerBidiStreamStream) Send(m *BidiStreamResponse) error {
	return x.stream.Send(m)
}

func (x *consumerBidiStreamStream) Recv() (*BidiStreamRequest, error) {
	m := new(BidiStreamRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
